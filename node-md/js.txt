ECMAScript、Javascript、nodejs
ecmascript:简称es，是一个语言标准
javascript:运行在浏览器的语言，改语言使用es标准，e+web api = javascript
nodejs: 运行在服务端的语言，该语言使用es标准es+node api
 es3 1999年
 es5 2009年
 es6 2015年 从该版本开始，不再使用数字作为编号，使用年份
 es7 2016年

 es6解决js无法开发大型应用的语言层面的问题

 兼容性问题如何解决？

声明变量的问题
var
    使用var声明变量：
    允许重复的变量声明，导致数据被覆盖
    变量提升，怪异的数据访问，闭包问题
    全局变量挂在到全局对象，全局对象成员污染问题
let
    let声明的变量不会挂在到全局
    let声明的变量，不允许当前作用于范围内重复声明
    es6中,引入let关键字用于解决变量声明的问题，同时引入了块级作用域的概念
    块级作用域：代码执行时遇到花括号，会创建一个块级作用域，花括号结束，销毁块级作用域
    在块级作用域中用let定义的变量，在作用域外不能访问
    使用let不会有变量提升，因此，不能在定义let变量之前使用它
    底层实现上，let声明的变量实际上也会有提升，但是，提升后会将其放入到‘暂时性死去’，如果访问的变量位于暂时性死去，则会报错
    当代码运行到该变量声明的语句时，会将其从暂时性 死区中移除
    eg:循环中，每次循环创建一个新的块级作用域，循环结束，块级作用域销毁
const
    const和let完全相同，仅在于const声明的变量，必须在声明时赋值，而且不可以重新赋值
    实际上，在开发中，应尽量使用const来声明变量，以保证变量的值不会随意篡改
    注意细节：
        1.常量不可变，是指声明的常量的内存空间不可变，并不保证内存空间中的地址指向的其他空间不可变
        2.常量的命名
            1.特殊的常量：该常量从字面意义上，一定是不可变的，比如圆周率等。命名规则通常为全部大写
            2.普通常量随意
        3.在循环中不能使用常量进行循环
            不允许 for(const i = 0; i < 10; i++)
            允许 for(const props in obj) 


新的字符串操作api
includes
startsWith
endWith
repeat

这两个循环的区别
for in
for of
正则表达式
    粘连标记 y
    匹配时，完全按照正则对象中的lastIndex位置开始匹配，并且匹配的位置必须在lastIndex位置

模板字符串`${表达式}`
1.多行字符串
2.拼接字符串   
3.模板字符串的标记
    标记名`模板字符串`
    1.参数1：被插值分割的字符串数组
    2.后续参数：所有的插值
    String.raw
    eg:
        对用户输入进行控制
        function safe(parts){
            const values = Array.prototype.slice.apply(this).slice(1)
            for let i= 0; i < values. length; i++) {
                const= values [i]. replace(/</g, "&It;").replace(/>/g, "&gt;");
                str+=parts [i] + v;
            if (i=== values.length-1） ｛
                str+= parts[i + 1];
            }
            return str;
        } 


参数默认值
    在书写形参时，直接给形参赋值，附的值即为默认值
    这样一来，当调用函数时，如果没有给对应的参数赋值，给他它的值是undefined，则会自动使用默认值
    对arguments的影响
        只要给函数加上参数默认值，该函数会自动变成严格模式下的规则：arguments和形参脱离
    暂时性死区
        形参和es6中的let和const声明一样，具有作用域，并且更具参数的声明顺序，存在暂时性死区

剩余参数（平时写公共函数可以使用）
    arguments的缺陷
        1.如果和形参配合使用，容易导致混乱
        2.从语义上，使用arguments获取参数，用于形参缺失，无法从函数定义上理解函数真实意图

        es6的剩余参数专门用于收集末尾的参数，把它放到一个数组中
        1.一个函数，仅能出现一个剩余参数
        2.一个函数，如果有剩余参数，剩余参数必须是最后一个参数

展开运算符（可以进行数组和对象的浅拷贝）
    对数组展开es6
    对对象展开es7
柯里化
    用于固定某特函数的前面的参数，得到一个新的函数

明确函数的双重用途
    es6提供了一个特殊的api，可以使用该api在函数内部，判断该函数是否使用了new来调用
    new.target
        该表达式，得到的是：如果没有使用new来调用函数，则返回undefined
        如果使用new调用函数，则得到的是new关键字后面的函数本身

this指向
1.通过对象调用函数,this指向对象
2.直接调用函数，this指向全局对象
3.如果通过new调用函数，this指向新创建的对象
4.如果通过apply,call,bind调用函数，this指向指定的数据
5.如果是DOM事件函数，this指向事件源

箭头函数是一个函数表达式，理论上，任何使用函数表达式的场景都可以使用箭头函数
(参数1， 参数2)=>{//函数体}
箭头函数的函数体中的this，取决于箭头函数定义的位置的this指向，而与如何调用无关
箭头函数中，不存在this, arguments,new target,如果使用了，则使用的是函数外层的对应的this、argument、new.target
箭头函数没有原型
箭头函数不能作用构造函数使用

应用场景
1.临时使用的函数，并不会刻意调用它
    事件处理函数
    异步处理函数 setTimeout ,setInterval
    其它临时性的函数
2.为了绑定外层this的函数
3.在不影响其他代码的情况下，保持代码的简洁

对象字面量语法 
1.成员速写
    同名形参可以省略不写
2.方法速写
    const user = {
        name: 'xxx',
        age: xx,
        say: function(){}
    }
    可以这么写
    const user = {
        name: 'xxx',
        age: xx,
        say(){} // 与上面等效 
    }
3.计算属性名
    有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在es6中，可以使用中括号[]来表示该属性名是通过计算得到的

Object的新增API
    Objec.is
    用于判断两个数据是否相等，基本上跟严格相等是一致的，除了一下两点
    1.NaN和NaN相等
    2.+0和-0不相等

    Object.assign
    用户对象混合, 返回第一个对象
    Object.assign({}, obj1, obj2)

    Object.getOwnPropertyNames的枚举顺序
    先排数字，并按照升序排序，再排其它，按照书写顺序排序

    Object.setPrototypeOf
    该函数用于设置某个对象的隐式原型
    比如：Object.setPrototypeOf(obj1, obj2)
    相当于： obj1.__proto__ = obj2    


面向对象：一种编程思想，跟具体的语言无关

对比面向过程
    面向过程：思考的切入点是功能的步骤
    面向对象：思考的切入点是对象的划分
    【大象装冰箱】
构造函数的语法糖
    传统的构造函数的问题
    1.属性的原型方法定义分离，降低了可读性
    2.原型成员可以被枚举
    3.默认情况下，构造函数仍然可以被当做普通函数使用

    类的特点
    1.类声明不会被提升，与let和const一样，存在暂时性死区
    2.类中的所有代码均在严格模式下执行
    3.类的所有方法都是不可枚举的
    4.类的所有方法内部都无法被当做构造函数使用
    5.类的构造器必须使用new来调用

类的其它书写方法
    1.可计算的成员名（跟对象字面量的使用方法一致，通过[]来表示）
    2.getter和setter
        Object.defineProperty可定义某个对象成员属性的读取和设置
        使用getter和setter赋值的属性不在原型上
    3.静态成员
        static
    4.字段初始化器ES7
        使用static的字段初始化器，添加的是静态成员
        没有使用static的字段初始化器，添加的成员位于对象上
        箭头函数在字段初始化器位置上，指向当前对象
    5.类表达式
        const A = class {
            //匿名类，类表达式
        }
    6.装饰器 decorator

类的继承
    如果两个类A和B，如果可以描述为，B是A，则A和B形成继承关系
    如果B是A，则有下面说法
    1.B继承自A
    2.A派生A
    3.B是A的子类
    4.A是B的父类
es6 
extends: 继承，用于类的定义
super： 直接当做函数调用，表示父类构造函数
    注意：es6要求，如果定义了constructor，并且该类是子类，则必须在constructor的第一行手动调用父类的构造函数
    如果子类不写constructor，则会有默认的构造器，该构造器需要的参数和父类一致
class B extends A {
    constructor(){
        supre(arguments)
    }
    test(){
        super.test()
    }
}
[冷知识]
用js制作抽象类
抽象类：一般是父类，不能通过该类创建对象
正常情况下，this的指向，this始终指向具体的类的对象

可以尝试使用面向对象的形式写一个像素鸟

对象解构
1.什么是解构
    解构不会影响到原始对象
2.在解构中使用默认值
3.非同名属性解构
    {属性名：变量名}
4.解构剩余对象属性可以用扩展运算符

数组解构
可以使用这个交换值
[b,a] = [a,b]

参数解构（这个非常有用）

符号
普通符号
符号是ES6新增的一个数据类型，它通过使用函数Symbol(符号描述)来创建
符号设计的初衷，是为了给对象设置私有属性
    私有属性： 只能在方法或类内部访问或使用

符号具有以下特点
1.没有字面量
2.使用typeof得到的类型是symbol
每次调用Symbol函数得到的符号永远不相等，无论符号描述是否相同
符号可以作为对象的属性名存在，这种属性称之为符号属性
    开发者可以通过精心的设计，让这些属性无法通过常规方式被外界访问
    符号属性是不能枚举的，因此在for-in循环中无法读取到符号属性，Object.keys方法也无法读取到符号属性
    Object.getOwnPropertyNames尽管可以得到所有无法枚举的属性，但是仍然无法读取到符号属性
    ES6新增Object.getOwnPropertySymbols方法，可以读取符号属性
符号无法被隐式转换，因此不能被用于数学运算、字符串拼接或其他隐式转换的场景，但符号可以显示的转换为字符串，通过String构造函数进行转换即可,console.log之所以可以输出符号，是它在内部进行了显示转换
符号可以转化为布尔类型 !symbol
es2019提供 description 返回符号的描述参数
sy.description
Reflect.ownKeys()可以返回所有类型的键名，包括Symbol类型
Symbol.for(描述) ----> 有就返回，没有就全局创建一个新的symbol
Symbol.keyFor() 返回一个已登记的Symbol类型值的描述值
    let s1 = Symbol.for('foo')
    Symbol.keyFor(s1)   // foo
内置Symbol值(11个)
    Symbol.hasInstance
    Symbol.isConcatSpreadable
        正常数组默认可以展开，类似数组的对象默认不展开
    Symbol.species
    Symbol.match
    Symbol.replace
    Symbol.search
    Symbol.split
    Symbol.toPrimitive
    Symbol.toStringTag
    Symbol.unscopables
    Symbol.iterator






    




浅拷贝
深拷贝


数组的结构赋值
    某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值
    结构赋值允许指定默认值
对象的结构赋值
    

Generator函数

运算符口占
** 指数运算符
    a ** b ** c ====> a ** (b ** c)
?. 链判断运算符 判断异常返回undefined

Proxy
Rflect


fetch（属于html）
XMLHttpReqeust的问题
1.所有的功能全部集中在同一个对象上，容易书写出混乱不易维护的代码
2.采用传统的事件驱动模式，无法适配新的Promise api

fetch api的特点
1.并非取代ajax，而是对ajax传统api的改进
2.精细的功能分割：头部信息、请求信息、响应信息等均分布到不同的对象，更利于处理各种复杂的ajax场景
3.使用promise api，更利于异步代码的书写
4.fetch api并非es6的内容，属于html5新增的web api并非es6的内容，属于html5新增的web
5.需要掌握网络通信的知识

迭代器
什么是迭代
从一个数据集合中按照一定的顺序，不断取出数据的过程

迭代和遍历的区别
迭代强调的是一次取数据，并不保证取多少，也不保证把所有的数据取完
遍历强调的是要把整个数据依次全部取出

迭代器
对迭代过程的封装，在不同的语言中有不同的表现形式，通常为对象

迭代模式
一种设计模式，用于统一迭代过程，并规范了迭代器规格
Promise
    resolve,reject
    then/catch/finally
    Promise.all
    Promise.race
    Promise.allSettle
