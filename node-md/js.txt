ECMAScript、Javascript、nodejs
ecmascript:简称es，是一个语言标准
javascript:运行在浏览器的语言，改语言使用es标准，e+web api = javascript
nodejs: 运行在服务端的语言，该语言使用es标准es+node api
 es3 1999年
 es5 2009年
 es6 2015年 从该版本开始，不再使用数字作为编号，使用年份
 es7 2016年

 es6解决js无法开发大型应用的语言层面的问题

 兼容性问题如何解决？

声明变量的问题
var
    使用var声明变量：
    允许重复的变量声明，导致数据被覆盖
    变量提升，怪异的数据访问，闭包问题
    全局变量挂在到全局对象，全局对象成员污染问题
let
    let声明的变量不会挂在到全局
    let声明的变量，不允许当前作用于范围内重复声明
    es6中,引入let关键字用于解决变量声明的问题，同时引入了块级作用域的概念
    块级作用域：代码执行时遇到花括号，会创建一个块级作用域，花括号结束，销毁块级作用域
    在块级作用域中用let定义的变量，在作用域外不能访问
    使用let不会有变量提升，因此，不能在定义let变量之前使用它
    底层实现上，let声明的变量实际上也会有提升，但是，提升后会将其放入到‘暂时性死去’，如果访问的变量位于暂时性死去，则会报错
    当代码运行到该变量声明的语句时，会将其从暂时性 死区中移除
    eg:循环中，每次循环创建一个新的块级作用域，循环结束，块级作用域销毁
const
    const和let完全相同，仅在于const声明的变量，必须在声明时赋值，而且不可以重新赋值
    实际上，在开发中，应尽量使用const来声明变量，以保证变量的值不会随意篡改
    注意细节：
        1.常量不可变，是指声明的常量的内存空间不可变，并不保证内存空间中的地址指向的其他空间不可变
        2.常量的命名
            1.特殊的常量：该常量从字面意义上，一定是不可变的，比如圆周率等。命名规则通常为全部大写
            2.普通常量随意
        3.在循环中不能使用常量进行循环
            不允许 for(const i = 0; i < 10; i++)
            允许 for(const props in obj) 


新的字符串操作api
includes
startsWith
endWith
repeat


数组的结构赋值
    某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值
    结构赋值允许指定默认值
对象的结构赋值
    

Generator函数

这两个循环的区别
for in
for of
